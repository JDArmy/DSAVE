{
  "Snoofing": {
    "title": "欺骗",
    "definition": "冒充人或物",
    "description": "指违背用户的认证信息。攻击者获得了用户的个人信息或使他能够重放认证过程的东西。Snoofing威胁能够冒充有效的系统用户或资源以访问系统从而危及系统安全。",
    "example": "示例：恶意冒充者（中间人）伪造IP（互联网供应商）数据包，劫持与服务器的连接。这里的漏洞是，通信协议没有考虑保密性和完整性设计；使用密码而不对其进行加密的认证协议会向窃听者透露凭证信息，然后窃听者可以利用这些信息来冒充用户。这里的漏洞是，凭证信息没有被正确加密；“特洛伊木马”攻击是典型的欺骗。例如，在浏览器上，一个网页可能设法构建一个完全视觉化的系统登录副本，并欺骗用户输入他们的姓名和密码，而不怀疑他们实际上是在向一个网站提供信息；伪造电子邮件。这种情况下的漏洞是缺乏电子邮件信息的保密性和完整性。"
  },
  "Tampering": {
    "title": "篡改",
    "definition": "篡改数据或代码",
    "description": "指在发现或未发现的情况下修改系统或用户数据。对存储或传输中的信息进行未经授权的更改，对硬盘进行格式化，恶意入侵者在通信中引入一个无法检测的网络数据包，以及对敏感文件进行无法检测的更改，都是篡改威胁。",
    "example": "示例：数据包注入攻击，即线路上的数据被修改。这种威胁的漏洞是在链路上发送的数据缺乏完整性；在没有授权检查的情况下修改文件数据。这种威胁的漏洞是缺少访问检查、缓冲区溢出、没有完整性检查等；由于执行错误的代码导致的数据损坏。漏洞包括未处理的内存分配失败，未初始化的内存，使用释放的内存资源，以及除以零等错误计算；数据被木马和病毒破坏或修改。漏洞是指软件对木马病毒的易感性。"
  },
  "Repudiation": {
    "title": "抵赖",
    "definition": "无法认定做过某行为，超限使用",
    "description": "指一个不受信任的用户在进行非法操作时没有被追踪的能力。可抵赖性威胁与用户（恶意的或其他的）有关，他们可以否认错误的行为，而没有任何方法可以证明。",
    "example": "示例：未被发现的攻击者闯入用户账户的尝试。缺少失败的登录审计的漏洞。用户无意中或恶意地删除了敏感文件。缺少对对象访问的成功审计的漏洞。恶意用户有能力拒绝发送消息。在接受信息之前缺乏信息签名和签名验证的漏洞。"
  },
  "InformationDisclosure": {
    "title": "信息泄露",
    "definition": "信息被泄露或窃取",
    "description": "指破坏用户的私人或关键业务信息。信息泄露威胁使信息暴露在不应该看到它的人面前。用户能够阅读他没有被授予访问权的文件，以及入侵者能够在两台计算机之间的传输过程中阅读数据，都是信息泄露威胁。注意，与欺骗威胁不同，在这里，攻击者直接获得信息，而不是通过欺骗合法用户来获得。",
    "example": "示例：缓冲区溢出攻击导致的数据泄漏。复杂的攻击，在有漏洞的系统调用（对操作系统或特权服务器的调用）上放置手工制作的调用堆栈，可导致特权代码返回信息，如内核内存转储，返回给未授权用户。这里的漏洞是系统服务中的缓冲区溢出。由于中间人攻击导致的数据窥探，以及简单的攻击，即未加密的数据包被嗅探。还有复杂的攻击，即有缺陷的认证协议使窃听者能够计算或破解会话密钥，从而使窃听者能够解密所有加密和签名的数据。这些漏洞都是网络协议的安全缺陷。未经授权获取数据。漏掉冒充客户端的服务器或不进行访问检查就返回数据的服务器（即使他们进行了冒充）就是例子。漏洞包括漏掉的冒充（即客户端获得对服务器所能访问的任何东西的访问权）或漏掉的访问检查。"
  },
  "DenialOfService": {
    "title": "拒绝服务",
    "definition": "消耗资源、服务可不用",
    "description": "指使系统暂时不可用或无法使用，例如那些可以强制重启或重新启动用户机器的攻击。当攻击者能够暂时使系统资源（处理时间、存储等）不可用或无法使用时，就存在拒绝服务的威胁。",
    "example": "示例：SYN攻击和数据包炸弹，利用各种网络协议漏洞，导致服务器崩溃；复杂的缓冲区溢出问题，如没有长度的参数，可以导致服务器追逐一个不存在的内存位置而崩溃。同样地，GetAdmin式的手工堆栈可以导致特权指令关闭系统；常见的编码错误，如未处理的内存分配失败（引用无效的指针）、未初始化的内存（使用的数据不好）、使用释放的内存和资源（引用无效的内存），以及计算错误（除以0），都会引起异常，使软件崩溃；薄弱的软件设计（设计中固有的或由于错误的配置），如一个进程占用了所有的CPU时间。"
  },
  "ElevationOfPrivilege": {
    "title": "权限提升",
    "definition": "未经授权获取、提升、滥用权限",
    "description": "指一个没有特权的用户获得了特权访问权，从而有足够的权限来损害和破坏整个系统。这类威胁更危险的方面是以不被发现的方式破坏系统，从而使用户能够在系统管理员不知情的情况下利用特权。特权提升的威胁包括那些允许攻击者拥有超过应有权限的情况，完全破坏了整个系统的安全，并造成极端的系统破坏。",
    "example": "示例：缓冲区超限，如GetAdmin攻击中的手工堆栈，导致用户代码以高权限执行，从而危及整个操作系统的可信计算基础；在未经授权用户同意的情况下运行可执行文件的能力，可以使犯罪者进行特权操作，例如使自己成为特权用户；安全子系统本身的访问检查缺失或不当，会导致权限提升。例如，如果管理员的组成员资格在没有访问检查的情况下被更新，就会使一个未经授权的用户成为系统管理员。"
  }
}